---
title: "Assignment 2"
---


## Hello!

If you are not Erdi Dasdemir and you are here, you are probably looking for information about the assignmenr. I would be happy if you could send me your suggestions for my homework. If you need help, you can reach me via Slack. I would be happy if you use my assignment as a helpful reference.

## 1. Importing Data to RStudio


```{r}
suppressMessages(library(tidyverse)) # for everything :)
suppressMessages(library(rvest)) # for HTML scraping
suppressMessages(library(stringr)) # for string processing

url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2024-01-01&sort=release_date,desc&num_votes=2498,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2010-01-01&sort=release_date,desc&num_votes=2498,&country_of_origin=TR&count=250"

data_html_1 <- read_html(url_1)
data_html_2 <- read_html(url_2)
```


Firstly,I called the libraries I needed by typing them at the beginning of my code. Then, I import data to R. Since I could not pull all the data at once, I divided the data into two according to dates.

## 2. Start web scrapping to create a Data Frame with columns: Title, Year, Duration,Rating, Votes


```{r}
title_names_1 <-html_nodes(data_html_1,'.ipc-title__text')
title_names_1 <- html_text(title_names_1)
title_names_1 <- tail(head(title_names_1,-1),-1)
title_names_1 <- str_split(title_names_1, " ", n=2)
title_names_1 <- unlist(lapply(title_names_1, function(x) {x[2]}))

title_names_2 <-html_nodes(data_html_2,'.ipc-title__text')
title_names_2 <- html_text(title_names_2)
title_names_2 <- tail(head(title_names_2,-1),-1)
title_names_2 <- str_split(title_names_2, " ", n=2)
title_names_2 <- unlist(lapply(title_names_2, function(x) {x[2]}))

titles<-c(title_names_1,title_names_2)


year_1 <- html_elements(data_html_1,'.dli-title-metadata > span:nth-child(1)')
year_1 <- html_text(year_1)

year_2 <- html_elements(data_html_2,'.dli-title-metadata > span:nth-child(1)')
year_2 <- html_text(year_2)

year <- as.numeric(c(year_1,year_2))


duration_1 <- html_elements(data_html_1,'.dli-title-metadata > span:nth-child(2)')
duration_1 <- html_text(duration_1)

duration_2 <- html_elements(data_html_2,'.dli-title-metadata > span:nth-child(2)')
duration_2 <- html_text(duration_2)

durations <- c(duration_1,duration_2)

rating_1 <- html_elements(data_html_1,'.ipc-rating-star--imdb')
rating_1 <- html_text(rating_1)
cleaned_rating_1 <- gsub("[^0-9]", "", rating_1)
first_two_digits_1 <- substr(cleaned_rating_1, 1, 2)
numeric_rating_1 <-as.numeric(first_two_digits_1)/10

rating_2 <- html_elements(data_html_2,'.ipc-rating-star--imdb')
rating_2 <- html_text(rating_2)
cleaned_rating_2 <- gsub("[^0-9]", "", rating_2)
first_two_digits_2 <- substr(cleaned_rating_2, 1, 2)
numeric_rating_2 <-as.numeric(first_two_digits_2)/10


rating <- c(numeric_rating_1, numeric_rating_2)

vote_1 <- html_elements(data_html_1,'.kRnqtn')
vote_1 <- html_text(vote_1)
cleaned_vote_1 <- gsub("[^0-9]", "", vote_1)
numeric_vote_1 <- as.numeric(gsub(",", "", cleaned_vote_1))


vote_2 <- html_elements(data_html_2,'.kRnqtn')
vote_2 <- html_text(vote_2)
cleaned_vote_2 <- gsub("[^0-9]", "", vote_2)
numeric_vote_2 <- as.numeric(gsub(",", "", cleaned_vote_2))

votes <- c(numeric_vote_1,numeric_vote_2)

suppressWarnings(hours <- ifelse(is.na(as.numeric(sub("h.*", "",durations))),0,as.numeric(sub("h.*", "",durations))))

minutes <- sub(".*\\s(\\d+)m", "\\1", durations)
minutes<-ifelse(grepl("h", minutes),0,minutes) 
minutes<-ifelse(grepl("m",minutes),gsub("m", "", minutes),minutes)
minutes <- as.numeric(minutes)

duration_min <-60*hours+minutes

imdb_data_frame <- data.frame(Title=titles,Year=year,Duration=durations, Rating=rating, Votes=votes, DurationMin = duration_min)


```


To create a data frame, I separated and combined the headers from each of the URLs I took separately and finally created a data frame by combining all the headers.

## 3. Exploratory Data Analysis

### a) The 5 best and worst movies according to rating


```{r}
index <- order(imdb_data_frame$Rating,decreasing = TRUE )
top_5 <- head(index,5)
imdb_data_frame[top_5[1:5],]

index_1 <- order(imdb_data_frame$Rating)
bottom_5 <- head(index_1,5)
imdb_data_frame[bottom_5[1:5],]   

```


For the last 5, I would like it to be in the Recep Ivedik series, even though the whole of Turkey does not agree with me, but this last five is quite bad and appropriate. For the top 5, Cem Yılmaz is not a comedian I like very much, but CM101 was good, other than that, it's a nostalgic 5. I think the average age of those who voted is high, and I also think that the actors got such high ratings because of their respectability. Both lists seem appropriate for me.

### b) My favorite movies


```{r}
my_fav_movies <- imdb_data_frame[grepl("Dedemin Insanlari", ignore.case = TRUE, imdb_data_frame$Title) |
                                   grepl("Ayla", ignore.case = TRUE, imdb_data_frame$Title), ]

my_fav_movies
```


"Dedemin İnsanları" is a very special movie for me and I think it did not get the rating it deserved. Since I cannot be objective on this issue, I may interpret it this way. Ayla is one of the best Turkish movies I have watched and its rating is neither more nor less.

### c) Average ratings of Turkish movies


```{r}
yearly_avg_ratings <- imdb_data_frame %>%
  group_by(Year) %>%
  summarize(avg_rating = mean(Rating))

ggplot(yearly_avg_ratings, aes(x = Year, y = avg_rating)) +
  geom_point() +
  labs(title = "Yearly Average Ratings of Turkish Movies", x = "Year", y = "Average Rating") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  

movie_counts <- imdb_data_frame %>%
  group_by(Year) %>%
  summarise(count = n())


ggplot(imdb_data_frame, aes(x =factor(Year) , y = Rating)) +
  geom_boxplot(fill = "skyblue") +
  labs(title = "Distribution of Ratings Over the Years", x = "Year", y = "Rating")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  

```


Although movies have increased over the years, their ratings have gradually decreased. I attribute this to the fact that all YouTubers in recent years have been making movies and movies that have no artistic quality and are made only for money purposes.

### d) Correlation Between Votes and Ratings


```{r}
correlation_1 <- cor(imdb_data_frame$Votes, imdb_data_frame$Rating)
correlation_1
```


As can be seen, the correlation is very close to 0. There is no linear relationship between two variables.

### e) Correlation Between Duration and Ratings


```{r}
correlation_2 <- cor(imdb_data_frame$DurationMin, imdb_data_frame$Rating)
correlation_2

```


As can be seen, this means that the correlation is closer to 0 than the previous result. There is no linear relationship between two variables.

## 4. IMDb Top 1000


```{r}
url_3 <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"

data_html_3 <- read_html(url_3)

title_names_3 <-html_nodes(data_html_3,'.ipc-title__text')
title_names_3 <- html_text(title_names_3)
title_names_3 <- tail(head(title_names_3,-1),-1)
title_names_3 <- str_split(title_names_3, " ", n=2)
title_names_3 <- unlist(lapply(title_names_3, function(x) {x[2]}))

year_3 <- html_elements(data_html_3,'.dli-title-metadata > span:nth-child(1)')
year_3 <- html_text(year_3)
year_3 <- as.factor(year_3)


imdb_data_frame_top1000 <- data.frame(Title=title_names_3,Year=year_3)

imdb_data_frame_top1000

```


-   Join the data frames


```{r}
imdb_data_frame_top1000$Year <- as.numeric(as.character(imdb_data_frame_top1000$Year)) #Since my code gave an error, I asked chatgpt about the error and she offered such a solution.

merged_data <- left_join(imdb_data_frame_top1000,imdb_data_frame, by = c("Title", "Year"))
merged_data

```


-   The top 11 movies from first data frame based on their rank


```{r}
index_2 <- order(imdb_data_frame$Rating,decreasing = TRUE )
top_11 <- head(index_2,11)
top_11 <- imdb_data_frame[top_11[1:11],]
top_11
```


-   It's really strange that there isn't even a single movie matching the IMDb top 1000 in the first data frame. I did research on this subject and IMDb does not provide an explanation as to how it determines the top 1000. I cannot say that I achieved much by analyzing the data. I think this is related to the up-to-dateness of the data, although I cannot base it on any concrete evidence.

