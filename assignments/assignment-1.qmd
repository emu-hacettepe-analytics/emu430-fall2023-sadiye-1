---
title: "Assignment 1"
---

My first assignment has three parts.

## (a)

[What is data wrangling? Intro, Motivation, Outline, Setup -- Pt. 1 Data Wrangling Introduction](https://www.youtube.com/watch?v=jOd65mR1zfw&list=PL9HYL-VRX0oTOK4cpbCbRk15K2roEgzVW&index=208)

### Summary

-   Data scientists spend a significant portion of their time collecting and preparing data before analysis.

-   R packages like tidyr and dplyr make data work more efficient.

-   Table structure allows you to work with large datasets more efficiently, only showing a portion of the data that fits in your console window.

-   The "pipe operator" (%\>%) is a handy way to connect data work steps.

-   You can learn to do things like selecting specific data, filtering, creating new info, and summarizing data using these tools.

## (b)

1.Indexing

-   Python

    Indexing in Python starts from 0.

    ```{python}
    x=list(range(1,4))
    first_element=x[1]
    #output is 2 because first index is 0 we should use x[0] for first element of the list in python.
    print(first_element)
    ```

-   R

    Indexing in R starts from 1.

    ```{r}
    x <- c(1:4)
    first_element <- x[1]
    #when we try it in python output is going to be 2 because indexing starts from 0.
    first_element 

    ```

2.Style

-   R

    R use more simple programming language rather then python.

    ```{r}
    y<-c(1,2,3,4,5)
    square<-y^2 
    #using square root of the defined element give us the square of elements on the list.
    square
    ```

-   Python

    We have to use for loop for calculate the square of the elements on the list.

    ```{python}
    y = [1,2,3,4,5]
    sq = [y**2 for y in y] 
    print(sq)

    ```

3.Syntax for Conditional Statements

-   R

    Ifelse applies the condition to each element on the list without for loop.

    ```{r}
    t <- c(1,2,3,4,5,6)
    ifelse(t<4,t+1,0)

    ```

-   Python

    In python, we need for loop to apply the condition to each element on the list.

    ```{python}
    t = [1,2,3,4,5,6]
    new_list = [x + 1 if x < 4 else 0 for x in t]
    print(new_list)
    ```

## (c)

```{r}

#install.packages("dslabs") 
# if you install the packages once there is no need to instaal each time just use for first time is enough.

library(dslabs)

data("na_example")

print(na_example) #print na_example

na_check <-ifelse(is.na(na_example),1,0) #for sumation check NA and print as 1

sum_na <- sum(na_check) 
sum_na # total numbers of NA

without_na<-ifelse(is.na(na_example),0,na_example) #turn the na values to 0

updated_num_na<-sum(ifelse(is.na(without_na),0,1))
updated_num_na


```
