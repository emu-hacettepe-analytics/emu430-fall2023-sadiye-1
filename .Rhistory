1 + 1
1 + 1
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
x <- [1:4]
x <- (1:4)
x <- c(1:4)
x <- c(1:4)
x
x <- c(1:4)
x #give us the list
first_element <- x[1]
first_element
t <- c(1,2,3,4,5,6)
if(t<4,t+1,0)
t <- c(1,2,3,4,5,6)
ifelse(t<4,t+1,0)
library(dslabs)
library(dslabs)
install.packages("dslabs")
library(dslabs)
install.packages("dslabs")
library(dslabs)
data("na_example")
install.packages("dslabs")
library(dslabs)
data("na_example")
library(dslabs)
data("na_example")
print(na_example)
library(dslabs)
data("na_example")
print(na_example)
is.na(na_example)
library(dslabs)
data("na_example")
print(na_example)
ifelse(is.na(na_example),1,0)
library(dslabs)
data("na_example")
print(na_example)
na_check <-ifelse(is.na(na_example),1,0)
sum_na <- sum(na_check)
library(dslabs)
data("na_example")
print(na_example)
na_check <-ifelse(is.na(na_example),1,0)
sum_na <- sum(na_check)
library(dslabs)
data("na_example")
print(na_example)
na_check <-ifelse(is.na(na_example),1,0)
sum_na <- sum(na_check)
sum_na
library(dslabs)
data("na_example")
print(na_example) #print na_example
na_check <-ifelse(is.na(na_example),1,0) #for sumation check NA and print as 1
sum_na <- sum(na_check)
sum_na # total numbers of NA
without_na<-ifelse(is.na(na_example),0,na_example)
is.na(without_na)
library(dslabs)
data("na_example")
print(na_example) #print na_example
na_check <-ifelse(is.na(na_example),1,0) #for sumation check NA and print as 1
sum_na <- sum(na_check)
sum_na # total numbers of NA
without_na<-ifelse(is.na(na_example),0,na_example)
updated_num_na<-sum(ifelse(is.na(without_na),0,1))
library(dslabs)
data("na_example")
print(na_example) #print na_example
na_check <-ifelse(is.na(na_example),1,0) #for sumation check NA and print as 1
sum_na <- sum(na_check)
sum_na # total numbers of NA
without_na<-ifelse(is.na(na_example),0,na_example) #turn the na values to 0
updated_num_na<-sum(ifelse(is.na(without_na),0,1))
updated_num_na
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
quit
library(dslabs)
data("na_example")
print(na_example) #print na_example
na_check <-ifelse(is.na(na_example),1,0) #for sumation check NA and print as 1
sum_na <- sum(na_check)
sum_na # total numbers of NA
without_na<-ifelse(is.na(na_example),0,na_example) #turn the na values to 0
updated_num_na<-sum(ifelse(is.na(without_na),0,1))
updated_num_na
reticulate::repl_python()
y = [1,2,3,4,5]
square = [x**2 for x in square] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
y = [1,2,3,4,5]
sq = [x**2 for x in sq] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq = [y**2 for y in sq] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq = [y**2 for y in sq] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq == [y**2 for y in sq] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq == [y**2 for y in y] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq == [y**2 for y in y] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq == [y**2 for y in y] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq == [y**2 for y in y] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
y = [1,2,3,4,5]
sq = [y**2 for y in y] #we have to use for loop for calculate the square of the elements on the list. More complex than R.
x=(1:4)
first_element=x[1] #output is 2 because first index is 0 we should use x[0] for first element of the list in python.
x=list(range(1:4))
first_element=x[1] #output is 2 because first index is 0 we should use x[0] for first element of the list in python.
x=list(range(1,4))
first_element=x[1] #output is 2 because first index is 0 we should use x[0] for first element of the list in python.
x=list(range(1,4))
first_element=x[1] #output is 2 because first index is 0 we should use x[0] for first element of the list in python.
x=list(range(1,4))
first_element=x[1]
#output is 2 because first index is 0 we should use x[0] for first element of the list in python.
primt(first_element)
x=list(range(1,4))
first_element=x[1]
#output is 2 because first index is 0 we should use x[0] for first element of the list in python.
print(first_element)
quit
library(dslabs)
data("na_example")
print(na_example) #print na_example
na_check <-ifelse(is.na(na_example),1,0) #for sumation check NA and print as 1
sum_na <- sum(na_check)
sum_na # total numbers of NA
without_na<-ifelse(is.na(na_example),0,na_example) #turn the na values to 0
updated_num_na<-sum(ifelse(is.na(without_na),0,1))
updated_num_na
reticulate::repl_python()
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
quit
t <- c(1,2,3,4,5,6)
ifelse(t<4,t+1,0)
reticulate::repl_python()
x=list(range(1,4))
first_element=x[1]
#output is 2 because first index is 0 we should use x[0] for first element of the list in python.
print(first_element)
y = [1,2,3,4,5]
sq = [y**2 for y in y]
quit
x <- c(1:4)
first_element <- x[1]
first_element
#when we try it in python output is going to be 2 because indexing starts from 0.
y<-c(1,2,3,4,5)
square<-y^2
#using square root of the defined element give us the square of elements on the list.
square
reticulate::repl_python()
y = [1,2,3,4,5]
sq = [y**2 for y in y]
y = [1,2,3,4,5]
sq = [y**2 for y in y]
print(sq)
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
t = [1,2,3,4,5,6]
new_list = [x + 1 if x < 4 else 0 for x in t]
print(new_list)
